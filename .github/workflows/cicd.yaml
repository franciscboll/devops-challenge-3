name: CI/CD Pipeline - Challenge 3

on:
#  push:
#    branches: [ "main" ]
#  pull_request:
#    branches: [ "main" ]

env:
  AWS_REGION: us-east-1
  EKS_CLUSTER_NAME: devops-challenge-cluster
  ECR_REPO: challenge-app
  APP_NAME: challenge-app

jobs:
  # -----------------------
  # Etapa 1 - Tests
  # -----------------------
  tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout del c贸digo
        uses: actions/checkout@v4

      - name: Ejecutar pruebas unitarias
        run: |
          cd app
          if [ -f "package.json" ]; then
            npm install && npm test
          elif [ -f "requirements.txt" ]; then
            pip install -r requirements.txt && pytest
          else
            echo "Sin framework de pruebas definido"
          fi

  # -----------------------
  # Etapa 2 - Build, Scan y Push
  # -----------------------
  build_and_push:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Checkout del c贸digo
        uses: actions/checkout@v4

      - name: Login en AWS ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | \
          docker login --username AWS --password-stdin $(aws sts get-caller-identity --query 'Account' --output text).dkr.ecr.$AWS_REGION.amazonaws.com

      - name: Construir imagen Docker
        run: |
          IMAGE_URI="$(aws sts get-caller-identity --query 'Account' --output text).dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO"
          TAG="git-${GITHUB_SHA::7}"
          docker build -t $IMAGE_URI:$TAG ./app
          docker tag $IMAGE_URI:$TAG $IMAGE_URI:latest

      - name: Escaneo de vulnerabilidades (grype)
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
          IMAGE_URI="$(aws sts get-caller-identity --query 'Account' --output text).dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO"
          TAG="git-${GITHUB_SHA::7}"
          grype $IMAGE_URI:$TAG || true

      - name: Publicar imagen en ECR
        run: |
          IMAGE_URI="$(aws sts get-caller-identity --query 'Account' --output text).dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO"
          TAG="git-${GITHUB_SHA::7}"
          docker push $IMAGE_URI:$TAG
          docker push $IMAGE_URI:latest

  # -----------------------
  # Etapa 3 - Deploy con Helm
  # -----------------------
  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push
    steps:
      - name: Checkout del c贸digo
        uses: actions/checkout@v4

      - name: Configurar acceso a EKS
        run: |
          aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION

      - name: Desplegar aplicaci贸n con Helm
        run: |
          IMAGE_URI="$(aws sts get-caller-identity --query 'Account' --output text).dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO"
          TAG="git-${GITHUB_SHA::7}"

          helm upgrade --install $APP_NAME ./deploy/helm \
            --namespace $APP_NAME --create-namespace \
            --set image.repository=$IMAGE_URI \
            --set image.tag=$TAG \
            --atomic --timeout 5m

      - name: Verificar rollout
        run: |
          kubectl rollout status deployment/$APP_NAME -n $APP_NAME --timeout=120s