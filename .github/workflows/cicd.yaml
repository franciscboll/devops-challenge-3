name: CI/CD Pipeline - Challenge 3

on:
  push:
    branches: [ "main" ]
    paths:
      - 'app/**'                # Código fuente de la aplicación
      - 'deploy/**'             # Archivos de despliegue Helm
      - '.github/workflows/**'  # Configuración del pipeline
      - '!**/README.md'         # Ignora cambios en documentación
  pull_request:
    branches: [ "main" ]
    paths:
      - 'app/**'
      - 'deploy/**'
      - '.github/workflows/**'
      - '!**/README.md'
  
  # 🧠 Permite ejecución manual desde la pestaña "Actions" en GitHub
  workflow_dispatch:
    inputs:
      deploy_env:
        description: "Seleccionar entorno de despliegue (default: main)"
        required: false
        default: "main"

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  EKS_CLUSTER_NAME: ${{ vars.EKS_CLUSTER_NAME }}
  ECR_REPO: ${{ vars.ECR_REPO }}
  APP_NAME: ${{ vars.APP_NAME }}

jobs:
  # -----------------------
  # Etapa 1 - Tests
  # -----------------------
  tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout del código
        uses: actions/checkout@v4

      - name: Ejecutar pruebas unitarias
        run: |
          cd app
          if [ -f "package.json" ]; then
            npm install && npm test
          else
            echo "Sin framework de pruebas definido"
          fi

  # -----------------------
  # Etapa 2 - Build, Scan y Push
  # -----------------------
  build_and_push:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Checkout del código
        uses: actions/checkout@v4

      # 🔹 Configurar credenciales AWS (corrección)
      - name: Configurar credenciales AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}  

      - name: Verificar variables cargadas
        run: |
          echo "AWS_REGION=$AWS_REGION"
          echo "ECR_REPO=$ECR_REPO"      

      - name: Login en AWS ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | \
          docker login --username AWS --password-stdin $(aws sts get-caller-identity --query 'Account' --output text).dkr.ecr.$AWS_REGION.amazonaws.com

      - name: Construir imagen Docker
        run: |
          IMAGE_URI="$(aws sts get-caller-identity --query 'Account' --output text).dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO"
          TAG="${APP_NAME}-${GITHUB_SHA::7}"
          docker build -t $IMAGE_URI:$TAG ./app
          docker tag $IMAGE_URI:$TAG $IMAGE_URI:latest

      - name: Escaneo de vulnerabilidades (grype)
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
          IMAGE_URI="$(aws sts get-caller-identity --query 'Account' --output text).dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO"
          TAG="${APP_NAME}-${GITHUB_SHA::7}"
          grype $IMAGE_URI:$TAG || true

      - name: Publicar imagen en ECR
        run: |
          IMAGE_URI="$(aws sts get-caller-identity --query 'Account' --output text).dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO"
          TAG="${APP_NAME}-${GITHUB_SHA::7}"
          docker push $IMAGE_URI:$TAG
          docker push $IMAGE_URI:latest

  # -----------------------
  # Etapa 3 - Deploy con Helm
  # -----------------------
  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push
    steps:
      - name: Checkout del código
        uses: actions/checkout@v4

      # 🔹 Configurar credenciales AWS (corrección)
      - name: Configurar credenciales AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}  

      - name: Verificar variables cargadas
        run: |
          echo "AWS_REGION=$AWS_REGION"
          echo "ECR_REPO=$ECR_REPO"    

      - name: Configurar acceso a EKS
        run: |
          aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION

      - name: Desplegar aplicación con Helm
        run: |
          IMAGE_URI="$(aws sts get-caller-identity --query 'Account' --output text).dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO"
          TAG="${APP_NAME}-${GITHUB_SHA::7}"

          helm upgrade --install $APP_NAME ./deploy/helm \
            --namespace $APP_NAME --create-namespace \
            --set image.repository=$IMAGE_URI \
            --set image.tag=$TAG \
            --atomic --timeout 5m

      - name: Verificar rollout
        run: |
          kubectl rollout status deployment/$APP_NAME -n $APP_NAME --timeout=120s